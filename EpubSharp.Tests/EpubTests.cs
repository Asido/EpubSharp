using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace EpubSharp.Tests
{
    [TestClass]
    public class EpubTests
    {
        [TestMethod]
        public void ReadWriteEpub30Test()
        {
            var archives = Utils.ZipAndCopyEpubs(@"../../Samples/epub30");
            ReadWriteTest(archives);
        }

        [TestMethod]
        public void ReadWriteEpub31Test()
        {
            var archives = Utils.ZipAndCopyEpubs(@"../../Samples/epub31");
            ReadWriteTest(archives);
        }

        [TestMethod]
        public void ReadWriteEpubAssortedTest()
        {
            var archives = Utils.ZipAndCopyEpubs(@"../../Samples/epub-assorted");
            ReadWriteTest(archives);
        }

        private void ReadWriteTest(List<string> archives)
        {
            foreach (var archive in archives)
            {
                var originalEpub = EpubReader.Read(archive);

                var stream = new MemoryStream();
                EpubWriter.Write(originalEpub, stream);
                stream.Seek(0, SeekOrigin.Begin);
                var savedEpub = EpubReader.Read(stream, false);

                AssertEpub(originalEpub, savedEpub);
            }
        }

        private void AssertEpub(EpubBook expected, EpubBook actual)
        {
            Assert.IsNotNull(expected);
            Assert.IsNotNull(actual);

            Assert.AreEqual(expected.Title, actual.Title);

            Assert.AreEqual(expected.Author, actual.Author);
            AssertPrimitiveCollection(expected.Authors, actual.Authors, nameof(actual.Authors), "Author");

            Assert.AreEqual(expected.CoverImage == null, actual.CoverImage == null, nameof(actual.CoverImage));
            if (expected.CoverImage != null && actual.CoverImage != null)
            {
                Assert.AreEqual(expected.CoverImage.Height, actual.CoverImage.Height, "CoverImage.Height");
                Assert.AreEqual(expected.CoverImage.Width, actual.CoverImage.Width, "CoverImage.Width");
            }

            AssertContentFileCollection(expected.Resources.Css, actual.Resources.Css, nameof(actual.Resources.Css));
            AssertContentFileCollection(expected.Resources.Fonts, actual.Resources.Fonts, nameof(actual.Resources.Fonts));
            AssertContentFileCollection(expected.Resources.Html, actual.Resources.Html, nameof(actual.Resources.Html));
            AssertContentFileCollection(expected.Resources.Images, actual.Resources.Images, nameof(actual.Resources.Images));
            AssertContentFileCollection(
                // Filter some format related files, because they often are not byte-by-byte the same when are generated by the writers.
                expected.Resources.Other.Where(e => e.Key != expected.Format.Opf.FindNcxPath()).ToDictionary(pair => pair.Key, pair => pair.Value),
                actual.Resources.Other.Where(e => e.Key != expected.Format.Opf.FindNcxPath()).ToDictionary(pair => pair.Key, pair => pair.Value),
                nameof(actual.Resources.Other)
            );
            AssertCollection(expected.SpecialResources.HtmlInReadingOrder, actual.SpecialResources.HtmlInReadingOrder, nameof(actual.SpecialResources.HtmlInReadingOrder), (old, @new) =>
            {
                AssertContentFile(old, @new, nameof(actual.SpecialResources.HtmlInReadingOrder));
            });

            AssertCollection(expected.TableOfContents, actual.TableOfContents, nameof(actual.TableOfContents), AssertChapter);
        }

        private void AssertCollectionWithIndex<T>(IEnumerable<T> expected, IEnumerable<T> actual, string name, Action<List<T>, List<T>, int> assert)
        {
            Assert.AreEqual(expected == null, actual == null, name);
            if (expected != null && actual != null)
            {
                var old = expected.ToList();
                var @new = actual.ToList();

                Assert.AreEqual(old.Count, @new.Count, $"{name}.Count");

                for (var i = 0; i < @new.Count; ++i)
                {
                    assert(old, @new, i);
                }
            }
        }

        private void AssertCollection<T>(IEnumerable<T> expected, IEnumerable<T> actual, string name, Action<T, T> assert)
        {
            AssertCollectionWithIndex(expected, actual, name, (a, b, i) =>
            {
                assert(a[i], b[i]);
            });
        }

        private void AssertPrimitiveCollection<T>(IEnumerable<T> expected, IEnumerable<T> actual, string collectionName, string unitName)
        {
            AssertCollectionWithIndex(expected, actual, collectionName, (a, b, i) =>
            {
                Assert.IsTrue(a.Contains(b[i]), unitName);
            });
        }

        private void AssertContentFileCollection<TContent>(Dictionary<string, TContent> expected, Dictionary<string, TContent> actual, string collectionName)
            where TContent : EpubContentFile
        {
            AssertCollection(expected, actual, collectionName, (a, b) =>
            {
                Assert.AreEqual(a.Key, b.Key, $"{collectionName}.Key");
                AssertContentFile(a.Value, b.Value, collectionName);
            });
        }

        private void AssertContentFile(EpubContentFile expected, EpubContentFile actual, string name)
        {
            Assert.IsTrue(expected.Content.SequenceEqual(actual.Content), $"{name}.Content");
            Assert.AreEqual(expected.ContentType, actual.ContentType, $"{name}.ContentType");
            Assert.AreEqual(expected.FileName, actual.FileName, $"{name}.FileName");
            Assert.AreEqual(expected.MimeType, actual.MimeType, $"{name}.MimeType");

            var castedOld = expected as EpubTextContentFile;
            var castedNew = actual as EpubTextContentFile;
            Assert.AreEqual(castedOld == null, castedNew == null);
            if (castedOld != null && castedNew != null)
            {
                Assert.AreEqual(castedOld.TextContent, castedNew.TextContent, $"{name}.TextContent");
            }
        }

        private void AssertChapter(EpubChapter expected, EpubChapter actual)
        {
            Assert.AreEqual(expected.Anchor, actual.Anchor);
            Assert.AreEqual(expected.FileName, actual.FileName);
            Assert.AreEqual(expected.Title, actual.Title);

            Assert.AreEqual(expected.SubChapters.Count, actual.SubChapters.Count);
            for (var i = 0; i < expected.SubChapters.Count; ++i)
            {
                AssertChapter(expected.SubChapters[i], actual.SubChapters[i]);
            }
        }
    }
}
